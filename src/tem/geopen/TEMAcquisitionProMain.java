/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package tem.geopen;

import chart.geopen.ResistanceChart;
import chart.geopen.TEMChart;
import comm.geopen.Write;
import handler.geopen.TEMData;
import handler.geopen.TEMDataFileFilter;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.Frame;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.Date;
import java.util.Enumeration;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import gnu.io.CommPortIdentifier;
import gnu.io.NoSuchPortException;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JSplitPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.JToggleButton;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.XYPlot;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

/**
 *
 * @author Administrator
 */
public class TEMAcquisitionProMain extends javax.swing.JFrame {

    private Write connect;
    public TEMData originData;
    public TEMChart temc;
    public XYSeries[][] xyseries;
    public XYSeriesCollection[] xyCollections;
    public String pathFileOpenDia = "";
    private TEMClockDialog clockDia;
    public String filePath = "";//保存路径
    public String pathFile = "";//文件打开路径
    //记录设定采集参数
    private String workPlace = "";//工作地点
    private int gain = -1;//增益
    private int channels = -1;//通道
    private int frequence = -1;//通道
    private int period = -1;//扫频
    private int transmittedModel = -1;//触发方式
    private int wirelessControlIndex = -1;//无线控制
    public boolean togetherA = false;//主站和全部子站是否同时采集
    private boolean onlyOnceTogetherA = false;//主站和全部子站只采集一次
    //放大缩小
    private int zoomUnitVer = 50;
    private int zoomUnitHor = 300;
    private int pressCountsX = 0;
    private int pressCountsY = 0;
    private int unitIncrementX = 30;
    private int unitIncrementY = 10;
    private int unitHeight = 0;//记录图表高度
    private int unitWidth = 0;
    //端口
    private String com = "";//默认
    //更新图标
    public Timer timer1 = new Timer();

    /**
     * Creates new form TEMAcquisitionProMain
     */
    public TEMAcquisitionProMain() {
        initComponents();
        originData = new TEMData(this);
        temc = new TEMChart(this);
        clockDia = new TEMClockDialog(this, true);
        //设定表高度
        stationInforTable.setRowHeight(50);
        //设定滚动大小
        showingScrollPane.getVerticalScrollBar().setUnitIncrement(unitIncrementY);
        showingScrollPane.getHorizontalScrollBar().setUnitIncrement(unitIncrementX);
        paraScrollPane.getVerticalScrollBar().setUnitIncrement(10);
        //开始不可见
        informationPanel.setVisible(false);
        paraOutPanel.setVisible(false);
        resistancePanel.setVisible(false);
        stationShowingScrollPane.setVisible(false);
        //标签初始值
        String gain = tem_gainComboBox.getSelectedItem().toString();//增益
        String period = tem_periodSpinner.getValue().toString();//扫频
        String channels = tem_channelSpinner.getValue().toString();//通道
        String frequence = tem_FreComboBox.getSelectedItem().toString();//基频
        String transmittedModel = tem_transmittedModelComboBox.getSelectedItem().toString();//触发方式
        String wirelessControlIndex = tem_WirelessComboBox.getSelectedItem().toString();//无线控制
        gainLabel.setText("增益： " + gain);
        periodLabel.setText("扫频周期： " + period);
        channelsLabel.setText("采集道数： " + channels);
        frequenceLabel.setText("基波频点： " + frequence);
        transmittedLabel.setText("触发方式： " + transmittedModel);
        controlLabel.setText("控制方式： " + wirelessControlIndex);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setParaDialog = new javax.swing.JDialog(this,true);
        setParaPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        tem_posTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        tem_gainComboBox = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        tem_channelSpinner = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        tem_periodSpinner = new javax.swing.JSpinner();
        jLabel41 = new javax.swing.JLabel();
        tem_transmittedModelComboBox = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        tem_WirelessComboBox = new javax.swing.JComboBox();
        jLabel16 = new javax.swing.JLabel();
        tem_FreComboBox = new javax.swing.JComboBox();
        setOkButton = new javax.swing.JButton();
        setCancelButton = new javax.swing.JButton();
        stationInforDialog = new javax.swing.JDialog(this);
        stationInforScrollPane = new javax.swing.JScrollPane();
        stationInforTable = new javax.swing.JTable();
        gpsMainStationDialog = new javax.swing.JDialog(this);
        gpsInforScrollPane = new javax.swing.JScrollPane();
        gpsMainStationTable = new javax.swing.JTable();
        chooseStationDataDialog = new javax.swing.JDialog(this,true);
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        stationsComboBox = new javax.swing.JComboBox();
        okButton = new javax.swing.JButton();
        comSetDialog = new javax.swing.JDialog(this,true);
        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        portComboBox = new javax.swing.JComboBox();
        okButton1 = new javax.swing.JButton();
        jToolBar2 = new javax.swing.JToolBar();
        jLabel58 = new javax.swing.JLabel();
        openButton = new javax.swing.JButton();
        jLabel59 = new javax.swing.JLabel();
        saveButton = new javax.swing.JButton();
        jLabel57 = new javax.swing.JLabel();
        hideGPSButton = new javax.swing.JButton();
        jLabel50 = new javax.swing.JLabel();
        hideParaButton = new javax.swing.JButton();
        jLabel48 = new javax.swing.JLabel();
        timeVButton = new javax.swing.JButton();
        jLabel60 = new javax.swing.JLabel();
        frequencyVButton = new javax.swing.JButton();
        jLabel62 = new javax.swing.JLabel();
        modelButton = new javax.swing.JButton();
        jLabel47 = new javax.swing.JLabel();
        testStation = new javax.swing.JToggleButton();
        jLabel45 = new javax.swing.JLabel();
        mainResisButton = new javax.swing.JToggleButton();
        jLabel56 = new javax.swing.JLabel();
        transmittedResisButt = new javax.swing.JToggleButton();
        jLabel63 = new javax.swing.JLabel();
        siteDataToggleButton = new javax.swing.JToggleButton();
        jLabel61 = new javax.swing.JLabel();
        startToggleButton = new javax.swing.JToggleButton();
        gainLabel = new javax.swing.JLabel();
        channelsLabel = new javax.swing.JLabel();
        periodLabel = new javax.swing.JLabel();
        transmittedLabel = new javax.swing.JLabel();
        controlLabel = new javax.swing.JLabel();
        frequenceLabel = new javax.swing.JLabel();
        resistancePanel = new javax.swing.JPanel();
        showingOutPanel = new javax.swing.JPanel();
        showingScrollPane = new javax.swing.JScrollPane();
        showingPanel = new javax.swing.JPanel();
        stationShowingScrollPane = new javax.swing.JScrollPane();
        stationShowingPanel = new javax.swing.JPanel();
        informationPanel = new javax.swing.JPanel();
        stationInforPanel = new javax.swing.JPanel();
        stationPanel = new javax.swing.JPanel();
        mainStationInforPanel = new javax.swing.JPanel();
        mainStationPanel = new javax.swing.JPanel();
        paraOutPanel = new javax.swing.JPanel();
        paraScrollPane = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        countFile1 = new javax.swing.JLabel();
        channelSpinner = new javax.swing.JSpinner();
        countG = new javax.swing.JLabel();
        gSpinner = new javax.swing.JSpinner();
        jLabel8 = new javax.swing.JLabel();
        daPosPath = new javax.swing.JTextField();
        dateLabel = new javax.swing.JLabel();
        dateFormat = new javax.swing.JFormattedTextField();
        timeFormat = new javax.swing.JFormattedTextField();
        dateLabel1 = new javax.swing.JLabel();
        latitudeLabel = new javax.swing.JLabel();
        latitudeFormat = new javax.swing.JTextField();
        longitudeLabel = new javax.swing.JLabel();
        longitudeFormat = new javax.swing.JTextField();
        locationState = new javax.swing.JTextField();
        longitudeLabel1 = new javax.swing.JLabel();
        superpositionLab1 = new javax.swing.JLabel();
        channel1_ComboBox = new javax.swing.JComboBox();
        superpositionLab2 = new javax.swing.JLabel();
        channel2_ComboBox = new javax.swing.JComboBox();
        channel3_ComboBox = new javax.swing.JComboBox();
        superpositionLab3 = new javax.swing.JLabel();
        fundamentalLab = new javax.swing.JLabel();
        fundamentalSpinner = new javax.swing.JSpinner();
        superpositionLab = new javax.swing.JLabel();
        superpositonSpinner = new javax.swing.JSpinner();
        MenuBar = new javax.swing.JMenuBar();
        FileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        separator1 = new javax.swing.JPopupMenu.Separator();
        exitsMenuItem = new javax.swing.JMenuItem();
        SetMenu = new javax.swing.JMenu();
        modelMenuItem = new javax.swing.JMenuItem();
        comSetMenuItem = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        pathMenuItem = new javax.swing.JMenuItem();
        showMenu = new javax.swing.JMenu();
        hideGPSMenuItem = new javax.swing.JMenuItem();
        hideParaMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        timeVMenuItem = new javax.swing.JMenuItem();
        frequencyVMenuItem = new javax.swing.JMenuItem();
        TestMenu = new javax.swing.JMenu();
        testStationMenuItem = new javax.swing.JMenuItem();
        mainResisMenuItem = new javax.swing.JMenuItem();
        transmittedResisMenuItem = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        siteDataMenuItem = new javax.swing.JMenuItem();
        startMenuItem = new javax.swing.JMenuItem();
        HelpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        setParaDialog.setTitle("参数设置");
        setParaDialog.setResizable(false);

        setParaPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("采集参数"));

        jLabel1.setText("工作地点");

        tem_posTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tem_posTextFieldActionPerformed(evt);
            }
        });

        jLabel3.setText("AD 增 益");

        tem_gainComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "4", "8", "16", "32", "64" }));

        jLabel4.setText("采集道数");

        tem_channelSpinner.setModel(new javax.swing.SpinnerListModel(new String[] {"1", "2", "3"}));
        tem_channelSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tem_channelSpinnerStateChanged(evt);
            }
        });

        jLabel5.setText("扫频周期");

        tem_periodSpinner.setModel(new javax.swing.SpinnerListModel(new String[] {"1", "2", "4", "8", "16", "32", "64", "128", "256", "512", "1024", "2048", "4096", "8192", "16384", "32768", "65535"}));

        jLabel41.setText("触发方式");

        tem_transmittedModelComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "自触发", "外触发", "GPS触发" }));
        tem_transmittedModelComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                tem_transmittedModelComboBoxItemStateChanged(evt);
            }
        });

        jLabel32.setText("控制方式");

        tem_WirelessComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "主站" }));
        tem_WirelessComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                tem_WirelessComboBoxItemStateChanged(evt);
            }
        });

        jLabel16.setText("基波频点");

        tem_FreComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "25Hz", "12.5Hz", "6.25Hz", "3.125Hz", "25Hz(高)", "50Hz(高)", "100Hz(高)" }));
        tem_FreComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                tem_FreComboBoxItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout setParaPanelLayout = new javax.swing.GroupLayout(setParaPanel);
        setParaPanel.setLayout(setParaPanelLayout);
        setParaPanelLayout.setHorizontalGroup(
            setParaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(setParaPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(setParaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(setParaPanelLayout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tem_FreComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(setParaPanelLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tem_periodSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(setParaPanelLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tem_channelSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(setParaPanelLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tem_gainComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(setParaPanelLayout.createSequentialGroup()
                        .addComponent(jLabel32)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tem_WirelessComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(setParaPanelLayout.createSequentialGroup()
                        .addComponent(jLabel41)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tem_transmittedModelComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(setParaPanelLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tem_posTextField)))
                .addGap(0, 0, 0))
        );
        setParaPanelLayout.setVerticalGroup(
            setParaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(setParaPanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(setParaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(tem_posTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(setParaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(tem_gainComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(setParaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(tem_channelSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(setParaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(tem_periodSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(setParaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel41)
                    .addComponent(tem_transmittedModelComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(setParaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(tem_FreComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(setParaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tem_WirelessComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel32))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setOkButton.setText("确定");
        setOkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setOkButtonActionPerformed(evt);
            }
        });

        setCancelButton.setText("取消");
        setCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setCancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout setParaDialogLayout = new javax.swing.GroupLayout(setParaDialog.getContentPane());
        setParaDialog.getContentPane().setLayout(setParaDialogLayout);
        setParaDialogLayout.setHorizontalGroup(
            setParaDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(setParaDialogLayout.createSequentialGroup()
                .addComponent(setParaPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, setParaDialogLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(setOkButton)
                .addGap(25, 25, 25)
                .addComponent(setCancelButton)
                .addContainerGap())
        );
        setParaDialogLayout.setVerticalGroup(
            setParaDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(setParaDialogLayout.createSequentialGroup()
                .addComponent(setParaPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(setParaDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(setCancelButton)
                    .addComponent(setOkButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3))
        );

        stationInforDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        stationInforDialog.setTitle("站点信息");
        stationInforDialog.setMinimumSize(new java.awt.Dimension(736, 183));
        stationInforDialog.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                stationInforDialogWindowClosing(evt);
            }
        });

        stationInforScrollPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        stationInforTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "序号", "站点编号", "叫站时间", "纬度", "经度", "电池电压", "子站准备状态", "子站电阻", "文件名"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        stationInforTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        stationInforTable.setColumnSelectionAllowed(true);
        stationInforTable.setMinimumSize(new java.awt.Dimension(750, 0));
        stationInforTable.setShowHorizontalLines(false);
        stationInforTable.setShowVerticalLines(false);
        stationInforTable.getTableHeader().setReorderingAllowed(false);
        JTableHeader tableHeader = stationInforTable.getTableHeader();
        DefaultTableCellRenderer hr = (DefaultTableCellRenderer) tableHeader.getDefaultRenderer();
        hr.setHorizontalAlignment(DefaultTableCellRenderer.CENTER);//列名居中
        stationInforScrollPane.setViewportView(stationInforTable);

        javax.swing.GroupLayout stationInforDialogLayout = new javax.swing.GroupLayout(stationInforDialog.getContentPane());
        stationInforDialog.getContentPane().setLayout(stationInforDialogLayout);
        stationInforDialogLayout.setHorizontalGroup(
            stationInforDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(stationInforScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 680, Short.MAX_VALUE)
        );
        stationInforDialogLayout.setVerticalGroup(
            stationInforDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(stationInforScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE)
        );

        gpsMainStationDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        gpsMainStationDialog.setTitle("主站GPS信息");

        gpsInforScrollPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        gpsInforScrollPane.setAutoscrolls(true);

        gpsMainStationTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "时间", "纬度", "经度", "卫星数量", "准确度", "绝对高程", "相对高程", "定位状态"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        gpsMainStationTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        gpsMainStationTable.setShowHorizontalLines(false);
        gpsMainStationTable.setShowVerticalLines(false);
        gpsMainStationTable.getTableHeader().setReorderingAllowed(false);
        gpsMainStationTable.setUpdateSelectionOnSort(false);
        gpsInforScrollPane.setViewportView(gpsMainStationTable);

        javax.swing.GroupLayout gpsMainStationDialogLayout = new javax.swing.GroupLayout(gpsMainStationDialog.getContentPane());
        gpsMainStationDialog.getContentPane().setLayout(gpsMainStationDialogLayout);
        gpsMainStationDialogLayout.setHorizontalGroup(
            gpsMainStationDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(gpsInforScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 604, Short.MAX_VALUE)
        );
        gpsMainStationDialogLayout.setVerticalGroup(
            gpsMainStationDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(gpsInforScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)
        );

        chooseStationDataDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        chooseStationDataDialog.setTitle("选择");
        chooseStationDataDialog.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                chooseStationDataDialogWindowClosing(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "选定子站", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("宋体", 0, 12), new java.awt.Color(0, 0, 255))); // NOI18N

        jLabel2.setText("子站编号：");

        okButton.setText("确定");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(stationsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(okButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(stationsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(okButton))
                .addGap(5, 5, 5))
        );

        javax.swing.GroupLayout chooseStationDataDialogLayout = new javax.swing.GroupLayout(chooseStationDataDialog.getContentPane());
        chooseStationDataDialog.getContentPane().setLayout(chooseStationDataDialogLayout);
        chooseStationDataDialogLayout.setHorizontalGroup(
            chooseStationDataDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        chooseStationDataDialogLayout.setVerticalGroup(
            chooseStationDataDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        comSetDialog.setTitle("选择");

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "选择端口", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("宋体", 0, 12), new java.awt.Color(0, 0, 255))); // NOI18N

        jLabel6.setText("本机可用端口：");

        portComboBox.setToolTipText("可用端口");
        portComboBox.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        okButton1.setText("确定");
        okButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(portComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(okButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(portComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(okButton1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout comSetDialogLayout = new javax.swing.GroupLayout(comSetDialog.getContentPane());
        comSetDialog.getContentPane().setLayout(comSetDialogLayout);
        comSetDialogLayout.setHorizontalGroup(
            comSetDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(comSetDialogLayout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        comSetDialogLayout.setVerticalGroup(
            comSetDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(comSetDialogLayout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("TEM数据采集程序");
        setIconImage(Toolkit.getDefaultToolkit().createImage(ClassLoader.getSystemResource("pic/geopen/GP.png")));
        setMinimumSize(new java.awt.Dimension(700, 500));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        addWindowStateListener(new java.awt.event.WindowStateListener() {
            public void windowStateChanged(java.awt.event.WindowEvent evt) {
                formWindowStateChanged(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        jToolBar2.setFloatable(false);
        jToolBar2.setRollover(true);

        jLabel58.setForeground(new java.awt.Color(204, 204, 204));
        jLabel58.setText(" ");
        jToolBar2.add(jLabel58);

        openButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/open.png"))); // NOI18N
        openButton.setToolTipText("打开文件");
        openButton.setFocusable(false);
        openButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        openButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        openButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButtonActionPerformed(evt);
            }
        });
        jToolBar2.add(openButton);

        jLabel59.setForeground(new java.awt.Color(204, 204, 204));
        jLabel59.setText("|");
        jToolBar2.add(jLabel59);

        saveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/save.png"))); // NOI18N
        saveButton.setToolTipText("保存路径");
        saveButton.setFocusable(false);
        saveButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        jToolBar2.add(saveButton);

        jLabel57.setForeground(new java.awt.Color(204, 204, 204));
        jLabel57.setText("|");
        jToolBar2.add(jLabel57);

        hideGPSButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/hide.png"))); // NOI18N
        hideGPSButton.setToolTipText("隐藏显示GPS");
        hideGPSButton.setFocusable(false);
        hideGPSButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        hideGPSButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        hideGPSButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hideGPSButtonActionPerformed(evt);
            }
        });
        jToolBar2.add(hideGPSButton);

        jLabel50.setForeground(new java.awt.Color(204, 204, 204));
        jLabel50.setText("|");
        jToolBar2.add(jLabel50);

        hideParaButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/horHide32.png"))); // NOI18N
        hideParaButton.setToolTipText("隐藏显示参数");
        hideParaButton.setFocusable(false);
        hideParaButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        hideParaButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        hideParaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hideParaButtonActionPerformed(evt);
            }
        });
        jToolBar2.add(hideParaButton);

        jLabel48.setForeground(new java.awt.Color(204, 204, 204));
        jLabel48.setText("|");
        jToolBar2.add(jLabel48);

        timeVButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/timeV32.png"))); // NOI18N
        timeVButton.setFocusable(false);
        timeVButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        timeVButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        timeVButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeVButtonActionPerformed(evt);
            }
        });
        jToolBar2.add(timeVButton);

        jLabel60.setForeground(new java.awt.Color(204, 204, 204));
        jLabel60.setText("|");
        jToolBar2.add(jLabel60);

        frequencyVButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/frequencyV32.png"))); // NOI18N
        frequencyVButton.setFocusable(false);
        frequencyVButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        frequencyVButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        frequencyVButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                frequencyVButtonActionPerformed(evt);
            }
        });
        jToolBar2.add(frequencyVButton);

        jLabel62.setForeground(new java.awt.Color(204, 204, 204));
        jLabel62.setText("|");
        jToolBar2.add(jLabel62);

        modelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/set.png"))); // NOI18N
        modelButton.setToolTipText("设置");
        modelButton.setFocusable(false);
        modelButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        modelButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        modelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modelButtonActionPerformed(evt);
            }
        });
        jToolBar2.add(modelButton);

        jLabel47.setForeground(new java.awt.Color(204, 204, 204));
        jLabel47.setText("|");
        jToolBar2.add(jLabel47);

        testStation.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/testStop.png"))); // NOI18N
        testStation.setToolTipText("叫站");
        testStation.setFocusable(false);
        testStation.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        testStation.setMargin(new java.awt.Insets(2, 10, 2, 10));
        testStation.setMaximumSize(new java.awt.Dimension(40, 40));
        testStation.setMinimumSize(new java.awt.Dimension(40, 40));
        testStation.setPreferredSize(new java.awt.Dimension(40, 40));
        testStation.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        testStation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testStationActionPerformed(evt);
            }
        });
        jToolBar2.add(testStation);

        jLabel45.setForeground(new java.awt.Color(204, 204, 204));
        jLabel45.setText("|");
        jToolBar2.add(jLabel45);

        mainResisButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/mainResis32.png"))); // NOI18N
        mainResisButton.setToolTipText("外部电阻");
        mainResisButton.setFocusable(false);
        mainResisButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        mainResisButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        mainResisButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainResisButtonActionPerformed(evt);
            }
        });
        jToolBar2.add(mainResisButton);

        jLabel56.setForeground(new java.awt.Color(204, 204, 204));
        jLabel56.setText("|");
        jToolBar2.add(jLabel56);

        transmittedResisButt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/resistance32.png"))); // NOI18N
        transmittedResisButt.setToolTipText("接地电阻");
        transmittedResisButt.setFocusable(false);
        transmittedResisButt.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        transmittedResisButt.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        transmittedResisButt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transmittedResisButtActionPerformed(evt);
            }
        });
        jToolBar2.add(transmittedResisButt);

        jLabel63.setForeground(new java.awt.Color(204, 204, 204));
        jLabel63.setText("|");
        jToolBar2.add(jLabel63);

        siteDataToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/siteData32.png"))); // NOI18N
        siteDataToggleButton.setToolTipText("子站数据");
        siteDataToggleButton.setFocusable(false);
        siteDataToggleButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        siteDataToggleButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        siteDataToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                siteDataToggleButtonActionPerformed(evt);
            }
        });
        jToolBar2.add(siteDataToggleButton);

        jLabel61.setForeground(new java.awt.Color(204, 204, 204));
        jLabel61.setText("|");
        jToolBar2.add(jLabel61);

        startToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/start32.png"))); // NOI18N
        startToggleButton.setToolTipText("开始采集");
        startToggleButton.setFocusable(false);
        startToggleButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        startToggleButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        startToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startToggleButtonActionPerformed(evt);
            }
        });
        jToolBar2.add(startToggleButton);

        gainLabel.setBackground(new java.awt.Color(255, 255, 255));
        gainLabel.setText("增益：");
        gainLabel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, " ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.BELOW_BOTTOM, new java.awt.Font("宋体", 0, 1))); // NOI18N

        channelsLabel.setText("采集道数：");
        channelsLabel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, " ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.BELOW_BOTTOM, new java.awt.Font("宋体", 0, 1))); // NOI18N

        periodLabel.setText("扫频周期：");
        periodLabel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, " ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.BELOW_BOTTOM, new java.awt.Font("宋体", 0, 1))); // NOI18N

        transmittedLabel.setText("触发方式：");
        transmittedLabel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, " ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.BELOW_BOTTOM, new java.awt.Font("宋体", 0, 1))); // NOI18N

        controlLabel.setText("控制方式：");
        controlLabel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, " ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.BELOW_BOTTOM, new java.awt.Font("宋体", 0, 1))); // NOI18N

        frequenceLabel.setText("基波频点：");
        frequenceLabel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, " ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.BELOW_BOTTOM, new java.awt.Font("宋体", 0, 1))); // NOI18N

        resistancePanel.setBackground(new java.awt.Color(255, 255, 255));
        resistancePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "通道电阻", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("宋体", 0, 12), new java.awt.Color(0, 0, 255))); // NOI18N
        resistancePanel.setMinimumSize(new java.awt.Dimension(100, 150));
        resistancePanel.setPreferredSize(new java.awt.Dimension(100, 150));
        resistancePanel.setLayout(new java.awt.GridLayout(1, 0));

        showingOutPanel.setMinimumSize(new java.awt.Dimension(40, 50));
        showingOutPanel.setPreferredSize(new java.awt.Dimension(19, 29));

        showingScrollPane.setBackground(new java.awt.Color(255, 255, 255));
        showingScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "图形显示", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("宋体", 0, 12), new java.awt.Color(0, 0, 255))); // NOI18N
        showingScrollPane.setMinimumSize(new java.awt.Dimension(40, 70));
        showingScrollPane.setPreferredSize(new java.awt.Dimension(40, 70));
        showingScrollPane.setRequestFocusEnabled(false);

        showingPanel.setBackground(new java.awt.Color(255, 255, 255));
        showingPanel.setLayout(new java.awt.GridLayout(0, 1));
        showingScrollPane.setViewportView(showingPanel);

        stationShowingScrollPane.setBackground(new java.awt.Color(255, 255, 255));
        stationShowingScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "图形显示", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("宋体", 0, 12), new java.awt.Color(0, 0, 255))); // NOI18N
        stationShowingScrollPane.setMinimumSize(new java.awt.Dimension(40, 70));
        stationShowingScrollPane.setPreferredSize(new java.awt.Dimension(40, 70));
        stationShowingScrollPane.setRequestFocusEnabled(false);

        stationShowingPanel.setBackground(new java.awt.Color(255, 255, 255));
        stationShowingPanel.setLayout(new java.awt.GridLayout(0, 1));
        stationShowingScrollPane.setViewportView(stationShowingPanel);

        javax.swing.GroupLayout showingOutPanelLayout = new javax.swing.GroupLayout(showingOutPanel);
        showingOutPanel.setLayout(showingOutPanelLayout);
        showingOutPanelLayout.setHorizontalGroup(
            showingOutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(showingOutPanelLayout.createSequentialGroup()
                .addComponent(showingScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(stationShowingScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(1, 1, 1))
        );
        showingOutPanelLayout.setVerticalGroup(
            showingOutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(showingScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(stationShowingScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        stationInforPanel.setBackground(new java.awt.Color(255, 255, 255));
        stationInforPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "子站GPS信息", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("宋体", 0, 12), new java.awt.Color(0, 0, 255))); // NOI18N
        stationInforPanel.setMinimumSize(new java.awt.Dimension(40, 80));
        stationInforPanel.setPreferredSize(new java.awt.Dimension(40, 80));
        stationInforPanel.setLayout(new java.awt.GridLayout(1, 0));

        stationPanel.setBackground(new java.awt.Color(255, 255, 255));
        stationPanel.setMinimumSize(new java.awt.Dimension(40, 70));
        stationPanel.setPreferredSize(new java.awt.Dimension(40, 70));
        stationPanel.setLayout(new java.awt.GridLayout(0, 1));
        stationInforPanel.add(stationPanel);

        mainStationInforPanel.setBackground(new java.awt.Color(255, 255, 255));
        mainStationInforPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "主站GPS信息", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("宋体", 0, 12), new java.awt.Color(0, 0, 255))); // NOI18N
        mainStationInforPanel.setMinimumSize(new java.awt.Dimension(40, 80));
        mainStationInforPanel.setPreferredSize(new java.awt.Dimension(40, 80));
        mainStationInforPanel.setLayout(new java.awt.GridLayout(1, 0));

        mainStationPanel.setBackground(new java.awt.Color(255, 255, 255));
        mainStationPanel.setMinimumSize(new java.awt.Dimension(40, 70));
        mainStationPanel.setPreferredSize(new java.awt.Dimension(40, 70));
        mainStationPanel.setLayout(new java.awt.GridLayout(1, 0));
        mainStationInforPanel.add(mainStationPanel);

        javax.swing.GroupLayout informationPanelLayout = new javax.swing.GroupLayout(informationPanel);
        informationPanel.setLayout(informationPanelLayout);
        informationPanelLayout.setHorizontalGroup(
            informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(stationInforPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(mainStationInforPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        informationPanelLayout.setVerticalGroup(
            informationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, informationPanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(mainStationInforPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(stationInforPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        paraOutPanel.setBackground(new java.awt.Color(255, 255, 255));

        paraScrollPane.setBackground(new java.awt.Color(255, 255, 255));
        paraScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "参数信息", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("宋体", 0, 12), new java.awt.Color(0, 0, 255))); // NOI18N

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        countFile1.setFont(new java.awt.Font("新宋体", 0, 12)); // NOI18N
        countFile1.setText("道    数：");

        channelSpinner.setFont(new java.awt.Font("宋体", 1, 12)); // NOI18N
        channelSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 10, 1));
        channelSpinner.setEnabled(false);

        countG.setFont(new java.awt.Font("新宋体", 0, 12)); // NOI18N
        countG.setText("增    益：");

        gSpinner.setFont(new java.awt.Font("宋体", 1, 12)); // NOI18N
        gSpinner.setEnabled(false);

        jLabel8.setFont(new java.awt.Font("新宋体", 0, 12)); // NOI18N
        jLabel8.setText("采集地点：");

        daPosPath.setEditable(false);
        daPosPath.setForeground(new java.awt.Color(0, 0, 255));

        dateLabel.setText("日    期：");

        dateFormat.setEditable(false);
        dateFormat.setForeground(new java.awt.Color(0, 0, 255));
        dateFormat.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        timeFormat.setEditable(false);
        timeFormat.setForeground(new java.awt.Color(0, 0, 255));
        timeFormat.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        dateLabel1.setText("时    间：");

        latitudeLabel.setText("纬    度：");

        latitudeFormat.setEditable(false);
        latitudeFormat.setForeground(new java.awt.Color(0, 0, 255));
        latitudeFormat.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        latitudeFormat.setText(" ");

        longitudeLabel.setText("经    度：");

        longitudeFormat.setEditable(false);
        longitudeFormat.setForeground(new java.awt.Color(0, 0, 255));
        longitudeFormat.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        longitudeFormat.setText(" ");

        locationState.setEditable(false);
        locationState.setForeground(new java.awt.Color(0, 0, 255));
        locationState.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        locationState.setText(" ");

        longitudeLabel1.setText("定    位：");

        superpositionLab1.setFont(new java.awt.Font("新宋体", 0, 12)); // NOI18N
        superpositionLab1.setText("通 道 一：");

        channel1_ComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "EX", "EY", "HX", "HY", "HZ" }));
        channel1_ComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                channel1_ComboBoxItemStateChanged(evt);
            }
        });

        superpositionLab2.setFont(new java.awt.Font("新宋体", 0, 12)); // NOI18N
        superpositionLab2.setText("通 道 二：");

        channel2_ComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "EX", "EY", "HX", "HY", "HZ" }));
        channel2_ComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                channel2_ComboBoxItemStateChanged(evt);
            }
        });

        channel3_ComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "EX", "EY", "HX", "HY", "HZ" }));
        channel3_ComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                channel3_ComboBoxItemStateChanged(evt);
            }
        });

        superpositionLab3.setFont(new java.awt.Font("新宋体", 0, 12)); // NOI18N
        superpositionLab3.setText("通 道 三：");

        fundamentalLab.setFont(new java.awt.Font("新宋体", 0, 12)); // NOI18N
        fundamentalLab.setText("基    频：");

        fundamentalSpinner.setFont(new java.awt.Font("宋体", 1, 12)); // NOI18N
        fundamentalSpinner.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(0.0f), null, null, Float.valueOf(1.0f)));
        fundamentalSpinner.setEnabled(false);

        superpositionLab.setFont(new java.awt.Font("新宋体", 0, 12)); // NOI18N
        superpositionLab.setText("叠加次数：");

        superpositonSpinner.setFont(new java.awt.Font("宋体", 1, 12)); // NOI18N
        superpositonSpinner.setEnabled(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addComponent(fundamentalLab)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(fundamentalSpinner))
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(countFile1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(countG, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(channelSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(gSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(dateLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(dateLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(channel1_ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(latitudeLabel)
                                .addComponent(longitudeLabel)
                                .addComponent(longitudeLabel1))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(timeFormat, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(daPosPath, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(dateFormat, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(latitudeFormat, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(longitudeFormat, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(locationState, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(superpositionLab3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(superpositionLab1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(superpositionLab2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(channel2_ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(channel3_ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(superpositionLab)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(superpositonSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, 0))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(countFile1)
                    .addComponent(channelSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(countG)
                    .addComponent(gSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fundamentalLab)
                    .addComponent(fundamentalSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(superpositionLab)
                    .addComponent(superpositonSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(superpositionLab1)
                    .addComponent(channel1_ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(superpositionLab2)
                    .addComponent(channel2_ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(superpositionLab3)
                    .addComponent(channel3_ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(daPosPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dateLabel)
                    .addComponent(dateFormat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(timeFormat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dateLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(latitudeLabel)
                    .addComponent(latitudeFormat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(longitudeLabel)
                    .addComponent(longitudeFormat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(longitudeLabel1)
                    .addComponent(locationState, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        paraScrollPane.setViewportView(jPanel2);

        javax.swing.GroupLayout paraOutPanelLayout = new javax.swing.GroupLayout(paraOutPanel);
        paraOutPanel.setLayout(paraOutPanelLayout);
        paraOutPanelLayout.setHorizontalGroup(
            paraOutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, paraOutPanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(paraScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE))
        );
        paraOutPanelLayout.setVerticalGroup(
            paraOutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paraOutPanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(paraScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 405, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        FileMenu.setMnemonic(KeyEvent.VK_F);
        FileMenu.setText("文件(F)");

        openMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/open16.png"))); // NOI18N
        openMenuItem.setMnemonic(KeyEvent.VK_S);
        openMenuItem.setText("打开(O)");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        FileMenu.add(openMenuItem);

        saveMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/save16.png"))); // NOI18N
        saveMenuItem.setText("保存(S)");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        FileMenu.add(saveMenuItem);
        FileMenu.add(separator1);

        exitsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        exitsMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/exit.png"))); // NOI18N
        exitsMenuItem.setMnemonic(KeyEvent.VK_X);
        exitsMenuItem.setText("退出(X)");
        exitsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitsMenuItemActionPerformed(evt);
            }
        });
        FileMenu.add(exitsMenuItem);

        MenuBar.add(FileMenu);

        SetMenu.setMnemonic(KeyEvent.VK_S);
        SetMenu.setText("设置(S)");

        modelMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        modelMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/set16.png"))); // NOI18N
        modelMenuItem.setMnemonic(KeyEvent.VK_P);
        modelMenuItem.setText("参数设置(P)");
        modelMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modelMenuItemActionPerformed(evt);
            }
        });
        SetMenu.add(modelMenuItem);

        comSetMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_MASK));
        comSetMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/comm16.png"))); // NOI18N
        comSetMenuItem.setText("端口设置(C)");
        comSetMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comSetMenuItemActionPerformed(evt);
            }
        });
        SetMenu.add(comSetMenuItem);
        SetMenu.add(jSeparator4);

        pathMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        pathMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/path16.png"))); // NOI18N
        pathMenuItem.setText("保存路径(R)");
        pathMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pathMenuItemActionPerformed(evt);
            }
        });
        SetMenu.add(pathMenuItem);

        MenuBar.add(SetMenu);

        showMenu.setMnemonic(KeyEvent.VK_V);
        showMenu.setText("显示(V)");

        hideGPSMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        hideGPSMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/hide16.png"))); // NOI18N
        hideGPSMenuItem.setText("纵向隐显(Z)");
        hideGPSMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hideGPSMenuItemActionPerformed(evt);
            }
        });
        showMenu.add(hideGPSMenuItem);

        hideParaMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.SHIFT_MASK));
        hideParaMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/horHide16.png"))); // NOI18N
        hideParaMenuItem.setText("横向隐显(H)");
        hideParaMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hideParaMenuItemActionPerformed(evt);
            }
        });
        showMenu.add(hideParaMenuItem);
        showMenu.add(jSeparator1);

        timeVMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_MASK));
        timeVMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/timeV16.png"))); // NOI18N
        timeVMenuItem.setText("线性坐标(T)");
        timeVMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeVMenuItemActionPerformed(evt);
            }
        });
        showMenu.add(timeVMenuItem);

        frequencyVMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        frequencyVMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/frequencyV16.png"))); // NOI18N
        frequencyVMenuItem.setText("对数坐标(L)");
        frequencyVMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                frequencyVMenuItemActionPerformed(evt);
            }
        });
        showMenu.add(frequencyVMenuItem);

        MenuBar.add(showMenu);

        TestMenu.setMnemonic(KeyEvent.VK_T);
        TestMenu.setText("检测(T)");

        testStationMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        testStationMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/testStop16.png"))); // NOI18N
        testStationMenuItem.setMnemonic(KeyEvent.VK_I);
        testStationMenuItem.setText("叫站(I)");
        testStationMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testStationMenuItemActionPerformed(evt);
            }
        });
        TestMenu.add(testStationMenuItem);

        mainResisMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_MASK));
        mainResisMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/mainResis16.png"))); // NOI18N
        mainResisMenuItem.setText("外部电阻(M)");
        mainResisMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainResisMenuItemActionPerformed(evt);
            }
        });
        TestMenu.add(mainResisMenuItem);

        transmittedResisMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        transmittedResisMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/resistance16.png"))); // NOI18N
        transmittedResisMenuItem.setText("接地电阻(R)");
        transmittedResisMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transmittedResisMenuItemActionPerformed(evt);
            }
        });
        TestMenu.add(transmittedResisMenuItem);

        MenuBar.add(TestMenu);

        jMenu2.setText("数据(A)");

        siteDataMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        siteDataMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/siteData16.png"))); // NOI18N
        siteDataMenuItem.setText("子站数据(D)");
        siteDataMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                siteDataMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(siteDataMenuItem);

        startMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        startMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/start16.png"))); // NOI18N
        startMenuItem.setText("开始采集(A)");
        startMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(startMenuItem);

        MenuBar.add(jMenu2);

        HelpMenu.setMnemonic(KeyEvent.VK_H);
        HelpMenu.setText("帮助(H)");

        aboutMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        aboutMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/about16.png"))); // NOI18N
        aboutMenuItem.setMnemonic(KeyEvent.VK_A);
        aboutMenuItem.setText("关于(A)");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        HelpMenu.add(aboutMenuItem);

        MenuBar.add(HelpMenu);

        setJMenuBar(MenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar2, javax.swing.GroupLayout.DEFAULT_SIZE, 591, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(informationPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(showingOutPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 403, Short.MAX_VALUE)
                    .addComponent(resistancePanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addComponent(paraOutPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(gainLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(periodLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(channelsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(frequenceLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(transmittedLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(controlLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(showingOutPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE)
                        .addGap(0, 0, 0)
                        .addComponent(informationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(0, 0, 0)
                        .addComponent(resistancePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(paraOutPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gainLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(channelsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(periodLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(transmittedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(controlLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(frequenceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        // TODO add your handling code here:
        openButtonActionPerformed(evt);
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void exitsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitsMenuItemActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_exitsMenuItemActionPerformed

    private void modelMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modelMenuItemActionPerformed
        // TODO add your handling code here:
        modelButtonActionPerformed(evt);
    }//GEN-LAST:event_modelMenuItemActionPerformed

    private void testStationMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testStationMenuItemActionPerformed
        // TODO add your handling code here:
        testStation.setSelected(true);
        testStationActionPerformed(evt);
    }//GEN-LAST:event_testStationMenuItemActionPerformed

    private void transmittedResisMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transmittedResisMenuItemActionPerformed
        // TODO add your handling code here:
        transmittedResisButt.setSelected(true);
        transmittedResisButtActionPerformed(evt);
    }//GEN-LAST:event_transmittedResisMenuItemActionPerformed

    private void startMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startMenuItemActionPerformed
        // TODO add your handling code here:
        startToggleButton.setSelected(true);
        startToggleButtonActionPerformed(evt);
    }//GEN-LAST:event_startMenuItemActionPerformed
    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        // TODO add your handling code here:
        TEMAboutDialog about = new TEMAboutDialog(this, true);
        about.pack();
        ShowScope.setLocation(about);
        about.setVisible(true);
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void hideGPSButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hideGPSButtonActionPerformed
        // TODO add your handling code here:
        if (informationPanel.isVisible() && showingOutPanel.isVisible()) {
            showingOutPanel.setVisible(true);
            informationPanel.setVisible(false);
        } else if (!informationPanel.isVisible() && showingOutPanel.isVisible()) {
            showingOutPanel.setVisible(false);
            informationPanel.setVisible(true);
        } else if (informationPanel.isVisible() && !showingOutPanel.isVisible()) {
            showingOutPanel.setVisible(true);
            informationPanel.setVisible(true);
        }
        setMainResisVisual();//通道电阻界面是否可见
    }//GEN-LAST:event_hideGPSButtonActionPerformed

    private void testStationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testStationActionPerformed
        // TODO add your handling code here:
        //变换图标
        changeIcon(testStation, "test.png", "testStop.png");
        //开始采集
        if (informationPanel.isVisible()) {
            stationPanel.setVisible(false);
            mainStationPanel.setVisible(false);
        }
        //先清理表格
        clearTable(stationInforTable);
        clearTable(gpsMainStationTable);
        //主站开始采集
        OriginSetExceptTestStation();
        testStationAction(2);
        //子站叫站线程
        Timer timer = new Timer();
        TimerTask task = new TimerTask() {
            public void run() {
                if (clockDia.isVisible()) {
                    testStation.setSelected(true);
                    OriginSetExceptTestStation();
                    testStationAction(1);
                }
//                clockDia.waitingProgressBar.setString("子站——叫站进行中...请稍后");
            }
        };
        timer.schedule(task, 5000);//当前时间开始起动 每次间隔2秒再启动
        //锁定界面
        clockFrame("叫站进行中...请稍后");
    }//GEN-LAST:event_testStationActionPerformed
    public void clockFrame(String str) {
        //锁定界面
        clockDia.waitingProgressBar.setString(str);
        clockDia.pack();
        ShowScope.setLocation(clockDia);
        clockDia.setVisible(true);
    }

    public void releaseFrame() {
        //锁定界面
        clockDia.dispose();
        //关闭更新图标
        timer1.cancel();
    }

    public void testStationAction(int recWriteModel) {
        Write.selectedWires = tem_WirelessComboBox.getSelectedIndex();//获得所选的无线控制参数
        Write.selectedWiresName = tem_WirelessComboBox.getSelectedItem().toString();//获得子站编号
        if (testStation.isSelected()) {//已经打开开关
            closePort();
            String selectedItem = com;//获得端口名称
            try {
                //建立读写线程
                connect.portId = CommPortIdentifier.getPortIdentifier(selectedItem);
                connect = new Write(this);
                connect.recWriteModel = recWriteModel;
            } catch (NoSuchPortException ex) {
//                JOptionPane.showMessageDialog(this, "叫站参数发送错误，请重新关闭尝试！");
            }
        } else {
            closePort();
            //清空列表main
            clearTable(stationInforTable);
        }
    }

//    public void getGpsInformation() {
//        // TODO add your handling code here:
//        if (gpsToggleButton.isSelected()) {//已经打开开关
//            closePort();
//            if (gpsMainStationTable.getRowCount() != 0) {
//                clearTable(gpsMainStationTable);
//            }
//            gpsToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/gpsRun.png")));
//            if (portComboBox.getItemCount() == 0) {
//                return;
//            } else {
//                String selectedItem = portComboBox.getSelectedItem().toString();//获得端口名称
//                try {
//                    //建立读写线程
//                    connect.portId = CommPortIdentifier.getPortIdentifier(selectedItem);
//                    connect = new Write(this);
//                    connect.recWriteModel = 2;
//                } catch (NoSuchPortException ex) {
////                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
//                }
//            }
//        } else {
//            closePort();
//            clearTable(gpsMainStationTable);
////            gpsToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/GPS.png")));
//        }
//    }
    public void clearTable(JTable stationInforTable) {
        //清空列表
        for (int index = stationInforTable.getModel().getRowCount() - 1; index >= 0; index--) {
            ((DefaultTableModel) stationInforTable.getModel()).removeRow(index);
        }
    }

    public void closePort() {
//        if (connect != null) {
//            connect.writeThread.interrupt();
//            connect.writeThread = null;
//            connect.serialPort.close();
//            connect.serialPort.removeEventListener();
//            connect.serialPort.notifyOnDataAvailable(false);
//            connect.serialPort = null;
//            connect = null;
//        }
    }
    private void transmittedResisButtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transmittedResisButtActionPerformed
        // TODO add your handling code here:
        //变换图标
        changeIcon(transmittedResisButt, "resistanceRun32.png", "resistance32.png");
        //开始采集
        OriginSetExcepTtransmittedResisButt();
        waitingResistance();
    }//GEN-LAST:event_transmittedResisButtActionPerformed
    public void waitingResistance() {
        if (transmittedResisButt.isSelected()) {//已经打开开关
            closePort();
//            transmittedResisButt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/resiresistanceRun16stanceRun32.png")));
//            transmittedResisMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/resistanceRun16.png")));
            String selectedItem = com;//获得端口名称;//获得端口名称
            try {
                //建立读写线程
                connect.portId = CommPortIdentifier.getPortIdentifier(selectedItem);
                connect = new Write(this);
                connect.recWriteModel = 3;//等待子站电阻
            } catch (NoSuchPortException ex) {
//                JOptionPane.showMessageDialog(this, "接地电阻参数发送错误，请重新关闭尝试！");
            }
            //倒计时开始
            WaitingResisDialog show = new WaitingResisDialog(this, true);
            show.task.addPropertyChangeListener(show);//必须跟在其后
            show.task.execute();
            show.pack();
            show.setVisible(true);
        } else {
            fresh();
        }
    }

    private void modelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modelButtonActionPerformed
        // TODO add your handling code here:
        //赋初始值
        workPlace = tem_posTextField.getText().toString().trim();//工作地点
        gain = tem_gainComboBox.getSelectedIndex();//增益
        channels = Integer.parseInt(tem_channelSpinner.getValue().toString());//通道
        frequence = tem_transmittedModelComboBox.getSelectedIndex();//基频
        period = Integer.parseInt(tem_periodSpinner.getValue().toString());//扫频
        transmittedModel = tem_transmittedModelComboBox.getSelectedIndex();//触发方式
        //可视化
        setParaDialog.pack();
        ShowScope.setLocation(setParaDialog);
        setParaDialog.setVisible(true);
    }//GEN-LAST:event_modelButtonActionPerformed
    private void startToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startToggleButtonActionPerformed
        // TODO add your handling code here:
        //先发送采集参数
        OriginSetExceptStartToggleButton();
        start(0);
        //只针对主站和全部子站模式
        int subStationNum = tem_WirelessComboBox.getSelectedIndex();//如果选择的是主站和全部子站 subStationNum=1
        if (subStationNum == 1) {
            final Timer timer = new Timer();
            TimerTask task = new TimerTask() {
                public void run() {
                    if (togetherA = true) {
                        tem_WirelessComboBox.setSelectedIndex(0);//主站采集
                        startToggleButton.setSelected(true);
                        OriginSetExceptStartToggleButton();
                        start(0);
                        //还原
                        System.out.println("记动开始-----www.liuzm.com java博客"); //在这写你要调用的方法
                        tem_WirelessComboBox.setSelectedIndex(1);
                        timer.cancel();
                    }
                }
            };
            timer.scheduleAtFixedRate(task, new Date(), 3000);//当前时间开始起动 每次间隔2秒再启动
//            timer.schedule(task, 5000);//当前时间开始起动 每次间隔2秒再启动
        }
    }//GEN-LAST:event_startToggleButtonActionPerformed
    public void start(int recWriteModel) {
        // TODO add your handling code here:
        if (startToggleButton.isSelected()) {
//            closePort();
            startToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/stop32.png")));
            startMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/stop16.png")));
            //找到端口
            String selectedItem = com;//获得端口名称
//            String selectedItem = portComboBox.getSelectedItem().toString();
            try {
                // 建立读写线程
                connect.portId = CommPortIdentifier.getPortIdentifier(selectedItem);
                connect = new Write(this);
                connect.recWriteModel = recWriteModel;
            } catch (NoSuchPortException ex) {
//                JOptionPane.showMessageDialog(this, "采集参数发送错误，请重新关闭尝试！");
            }
            clockFrame("主站采集进行中...请稍后");
        } else {
            fresh();
//            closePort();
//            startToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/start32.png")));
//            startMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/start16.png")));
//            releaseFrame();
        }
    }

    private void tem_transmittedModelComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_tem_transmittedModelComboBoxItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_tem_transmittedModelComboBoxItemStateChanged

    private void tem_WirelessComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_tem_WirelessComboBoxItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_tem_WirelessComboBoxItemStateChanged

    private void tem_posTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tem_posTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tem_posTextFieldActionPerformed

    private void openButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openButtonActionPerformed
        // TODO add your handling code here:
        new Thread(new Runnable() {
            @Override
            public void run() {
                openTEM();
            }
        }).start();
    }//GEN-LAST:event_openButtonActionPerformed
    public void clearComponent() {
        showingPanel.removeAll();
        upDateShowingOutPanelUI();
        //设定标题
        setTitle("TEM数据采集程序");
    }
    private void stationInforDialogWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_stationInforDialogWindowClosing
        // TODO add your handling code here:
        testStation.setSelected(false);
        closePort();
        stationInforDialog.dispose();
        testStation.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/testStop.png")));
    }//GEN-LAST:event_stationInforDialogWindowClosing

    private void setCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setCancelButtonActionPerformed
        // TODO add your handling code here:
        //还原
        tem_posTextField.setText(workPlace);//工作地点
        tem_gainComboBox.setSelectedIndex(gain);
        tem_channelSpinner.setValue(channels + "");//通道
        tem_FreComboBox.setSelectedIndex(frequence);//基频
        tem_periodSpinner.setValue(period + "");//扫频
        tem_transmittedModelComboBox.setSelectedIndex(transmittedModel);//触发方式
        tem_WirelessComboBox.setSelectedIndex(wirelessControlIndex);//无线控制
        setParaDialog.dispose();
    }//GEN-LAST:event_setCancelButtonActionPerformed

    private void setOkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setOkButtonActionPerformed
        // TODO add your handling code here:
        setParaDialog.dispose();
        //标签初始值
        String gain = tem_gainComboBox.getSelectedItem().toString();//增益
        String period = tem_periodSpinner.getValue().toString();//扫频
        String channels = tem_channelSpinner.getValue().toString();//通道
        String frequence = tem_FreComboBox.getSelectedItem().toString();//基频
        String transmittedModel = tem_transmittedModelComboBox.getSelectedItem().toString();//触发方式
        String wirelessControlIndex = tem_WirelessComboBox.getSelectedItem().toString();//无线控制

        gainLabel.setText("增益： " + gain);
        periodLabel.setText("扫频周期： " + period);
        channelsLabel.setText("采集道数： " + channels);
        frequenceLabel.setText("基波频点： " + frequence);
        transmittedLabel.setText("触发方式： " + transmittedModel);
        controlLabel.setText("控制方式： " + wirelessControlIndex);
        //是否为主站全部子站模式
        int subStationNum = tem_WirelessComboBox.getSelectedIndex();//如果选择的是主站和全部子站 subStationNum=1
        if (subStationNum == 1) {
            togetherA = true;
        } else {
            togetherA = false;
        }
    }//GEN-LAST:event_setOkButtonActionPerformed

    private void hideParaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hideParaButtonActionPerformed
        // TODO add your handling code here:
        if (paraOutPanel.isVisible()) {
            paraOutPanel.setVisible(false);
        } else if (!paraOutPanel.isVisible()) {
            paraOutPanel.setVisible(true);
        }
    }//GEN-LAST:event_hideParaButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        try {
            // TODO add your handling code here:
            saveFile();


        } catch (IOException ex) {
            Logger.getLogger(TEMAcquisitionProMain.class
                    .getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(TEMAcquisitionProMain.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_saveButtonActionPerformed
    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        // TODO add your handling code here:
        saveButtonActionPerformed(evt);
    }//GEN-LAST:event_saveMenuItemActionPerformed
    public void saveFile() throws IOException, ClassNotFoundException {
        TEMDataFileFilter geopenFileFilter = null;
        String name = getTitle().split("[-]")[0];
        String path1 = filePath.concat("\\").concat(name);
        String path2 = pathFileOpenDia.concat("\\").concat(name);
        if (new File(path1).exists()) {
            geopenFileFilter = new TEMDataFileFilter(path1);
        } else if (new File(path2).exists()) {
            geopenFileFilter = new TEMDataFileFilter(path2);
        } else {
            JOptionPane.showMessageDialog(this, "不存在可保存文件！");
            return;
        }
        String[] selectedFileName = name.split("[.]");
        if (selectedFileName.length > 1) {
            geopenFileFilter.setSelectedFile(new File(name));
        }
        if (geopenFileFilter.showSaveDialog(this) == TEMDataFileFilter.APPROVE_OPTION) {
            // 获取当前路径
            File currentDirectory = geopenFileFilter.getCurrentDirectory();
            // 获取文件名
            String fileName = geopenFileFilter.getSelectedFile().getName();
            String[] readFile = fileName.split("[.]");
            // 获取后缀名
            String suf = geopenFileFilter.getSuf();
            // 组合保存路径
            String savePath = currentDirectory + "\\" + readFile[0] + suf;
            File geopenFile = new File(savePath);//监测是否有重复的
            if (geopenFile.exists()) {
                int count = JOptionPane.showConfirmDialog(this, "是否确定进行修改？", "文件修改", JOptionPane.OK_OPTION);
                if (count == 0) {
                    try {
                        // 将图片写到保存路径
                        save(geopenFile);
                    } catch (Exception ie) {
                    }
                } else if (count == 1) {
//                    saveFile();
                }
            } else {
                save(geopenFile);
            }
        }
    }

    public void save(File file) {
        try {
            RandomAccessFile raf = new RandomAccessFile(file, "rw");
            raf.skipBytes(208);
            String channelEH = "1=" + channel1_ComboBox.getSelectedItem().toString().toUpperCase() + "1"
                    + "/2=" + channel2_ComboBox.getSelectedItem().toString().toUpperCase() + "1"
                    + "/3=" + channel2_ComboBox.getSelectedItem().toString().toUpperCase() + "1";
            raf.writeBytes(channelEH);
            raf.close();
        } catch (IOException ex) {
        }
    }
    private void hideGPSMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hideGPSMenuItemActionPerformed
        // TODO add your handling code here:
        hideGPSButtonActionPerformed(evt);
    }//GEN-LAST:event_hideGPSMenuItemActionPerformed

    private void hideParaMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hideParaMenuItemActionPerformed
        // TODO add your handling code here:
        hideParaButtonActionPerformed(evt);
    }//GEN-LAST:event_hideParaMenuItemActionPerformed

    private void timeVButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeVButtonActionPerformed
        // TODO add your handling code here:
        //界面更换
        upDateShowingOutPanelUI();
        Component[] components = showingPanel.getComponents();
        int counts = components.length;
        int channel = (Integer) channelSpinner.getValue();
        int rec = 0;//计数
        String channelName = "";
        for (int i = 0; i < counts; i++) {
            ChartPanel chartPanel = (ChartPanel) components[i];
            JFreeChart chart = chartPanel.getChart();
            XYPlot xYPlot = chart.getXYPlot();
            NumberAxis rangeAxis = new NumberAxis("Voltage (v)");
            rangeAxis.setLabelPaint(Color.BLUE);
            rangeAxis.setTickLabelFont(new Font("", Font.PLAIN, 10));
            rangeAxis.setLabelFont(new Font("SansSerif", Font.PLAIN, 12));
            xYPlot.setRangeAxis(rangeAxis);
        }
    }//GEN-LAST:event_timeVButtonActionPerformed

    private void timeVMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeVMenuItemActionPerformed
        // TODO add your handling code here:
        timeVButtonActionPerformed(evt);
    }//GEN-LAST:event_timeVMenuItemActionPerformed

    private void frequencyVButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_frequencyVButtonActionPerformed
        // TODO add your handling code here:
        //界面更换
        upDateShowingOutPanelUI();
        Component[] components = showingPanel.getComponents();
        int counts = components.length;
        int channel = (Integer) channelSpinner.getValue();
        int rec = 0;//计数
        String channelName = "";
        for (int i = 0; i < counts; i++) {
            ChartPanel chartPanel = (ChartPanel) components[i];
            JFreeChart chart = chartPanel.getChart();
            XYPlot xYPlot = chart.getXYPlot();
            LogarithmicAxis rangeAxis = new LogarithmicAxis("Voltage (v)");
            rangeAxis.setAllowNegativesFlag(true);
            rangeAxis.setLabelPaint(Color.BLUE);
            rangeAxis.setTickLabelFont(new Font("", Font.PLAIN, 10));
            rangeAxis.setLabelFont(new Font("SansSerif", Font.PLAIN, 12));
            xYPlot.setRangeAxis(rangeAxis);
        }
    }//GEN-LAST:event_frequencyVButtonActionPerformed

    private void frequencyVMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_frequencyVMenuItemActionPerformed
        // TODO add your handling code here:
        frequencyVButtonActionPerformed(evt);
    }//GEN-LAST:event_frequencyVMenuItemActionPerformed
    public void upDateShowingOutPanelUI() {
        //更新界面
        showingScrollPane.setVisible(true);
        stationShowingScrollPane.setVisible(false);
        showingOutPanel.updateUI();
    }
    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
//        requestFocus();
    }//GEN-LAST:event_formMouseClicked

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        // TODO add your handling code here:
        if (showingPanel.getComponents().length > 1) {
            if (evt.getKeyCode() == KeyEvent.VK_UP) {
                narrowedY();
            } else if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
                magnifiedY();
            } else if (evt.getKeyCode() == KeyEvent.VK_RIGHT) {
                magnifiedX();
            } else if (evt.getKeyCode() == KeyEvent.VK_LEFT) {
                narrowedX();
            }
        }
        requestFocus();
    }//GEN-LAST:event_formKeyPressed

    private void pathMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pathMenuItemActionPerformed
        // TODO add your handling code here:
        savePath();
    }//GEN-LAST:event_pathMenuItemActionPerformed

    private void siteDataMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_siteDataMenuItemActionPerformed
        // TODO add your handling code here:
        initialSiteDataDialog();
    }//GEN-LAST:event_siteDataMenuItemActionPerformed

    public void fresh() {
        //解除锁定
        releaseFrame();
        //还原
        closePort();
        if (testStation.isSelected()) {
            testStation.setSelected(false);
            testStation.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/testStop.png")));
            testStationMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/testStop16.png")));
        }
        if (transmittedResisButt.isSelected()) {
            transmittedResisButt.setSelected(false);
            transmittedResisButt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/resistance32.png")));
            transmittedResisMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/resistance16.png")));
        }
        if (siteDataToggleButton.isSelected()) {
            siteDataToggleButton.setSelected(false);
            siteDataToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/siteData32.png")));
            siteDataMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/siteData16.png")));
        }
        if (startToggleButton.isSelected()) {
            startToggleButton.setSelected(false);
            startToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/start32.png")));
            startMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/start16.png")));
        }
        if (mainResisButton.isSelected()) {
            mainResisButton.setSelected(false);
            mainResisButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/mainResis32.png")));
            mainResisMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/mainResis16.png")));
        }
    }

    public void OriginSetExcepTtransmittedResisButt() {
        if (testStation.isSelected()) {
            testStation.setSelected(false);
            testStation.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/testStop.png")));
            testStationMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/testStop16.png")));
        }
        if (startToggleButton.isSelected()) {
            startToggleButton.setSelected(false);
            startToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/start32.png")));
            startMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/start16.png")));
        }
        if (siteDataToggleButton.isSelected()) {
            siteDataToggleButton.setSelected(false);
            siteDataToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/siteData32.png")));
            siteDataMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/siteData16.png")));
        }
        if (mainResisButton.isSelected()) {
            mainResisButton.setSelected(false);
            mainResisButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/mainResis32.png")));
            mainResisMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/mainResis16.png")));
        }
    }

    public void OriginSetExceptSiteDataToggleButton() {
        if (testStation.isSelected()) {
            testStation.setSelected(false);
            testStation.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/testStop.png")));
            testStationMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/testStop16.png")));
        }
        if (transmittedResisButt.isSelected()) {
            transmittedResisButt.setSelected(false);
            transmittedResisButt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/resistance32.png")));
            transmittedResisMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/resistance16.png")));
        }
        if (startToggleButton.isSelected()) {
            startToggleButton.setSelected(false);
            startToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/start32.png")));
            startMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/start16.png")));
        }
        if (mainResisButton.isSelected()) {
            mainResisButton.setSelected(false);
            mainResisButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/mainResis32.png")));
            mainResisMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/mainResis16.png")));
        }
    }

    public void OriginSetExceptStartToggleButton() {
        if (testStation.isSelected()) {
            testStation.setSelected(false);
            testStation.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/testStop.png")));
            testStationMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/testStop16.png")));
        }
        if (transmittedResisButt.isSelected()) {
            transmittedResisButt.setSelected(false);
            transmittedResisButt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/resistance32.png")));
            transmittedResisMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/resistance16.png")));
        }
        if (siteDataToggleButton.isSelected()) {
            siteDataToggleButton.setSelected(false);
            siteDataToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/siteData32.png")));
            siteDataMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/siteData16.png")));
        }
        if (mainResisButton.isSelected()) {
            mainResisButton.setSelected(false);
            mainResisButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/mainResis32.png")));
            mainResisMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/mainResis16.png")));
        }
    }

    public void OriginSetExceptTestStation() {
        if (transmittedResisButt.isSelected()) {
            transmittedResisButt.setSelected(false);
            transmittedResisButt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/resistance32.png")));
            transmittedResisMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/resistance16.png")));
        }
        if (startToggleButton.isSelected()) {
            startToggleButton.setSelected(false);
            startToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/start32.png")));
            startMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/start16.png")));
        }
        if (siteDataToggleButton.isSelected()) {
            siteDataToggleButton.setSelected(false);
            siteDataToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/siteData32.png")));
            siteDataMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/siteData16.png")));
        }
        if (mainResisButton.isSelected()) {
            mainResisButton.setSelected(false);
            mainResisButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/mainResis32.png")));
            mainResisMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/mainResis16.png")));
        }
    }

    public void OriginSetExceptMainResis() {
        if (testStation.isSelected()) {
            testStation.setSelected(false);
            testStation.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/testStop.png")));
            testStationMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/testStop16.png")));
        }
        if (transmittedResisButt.isSelected()) {
            transmittedResisButt.setSelected(false);
            transmittedResisButt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/resistance32.png")));
            transmittedResisMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/resistance16.png")));
        }
        if (startToggleButton.isSelected()) {
            startToggleButton.setSelected(false);
            startToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/start32.png")));
            startMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/start16.png")));
        }
        if (siteDataToggleButton.isSelected()) {
            siteDataToggleButton.setSelected(false);
            siteDataToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/siteData32.png")));
            siteDataMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/siteData16.png")));
        }
    }
    private void siteDataToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_siteDataToggleButtonActionPerformed
        // TODO add your handling code here:
        initialSiteDataDialog();
    }//GEN-LAST:event_siteDataToggleButtonActionPerformed
    public void initialSiteDataDialog() {
        int counts = tem_WirelessComboBox.getItemCount();
        if (counts > 1) {//有子站
            for (int i = 3; i < counts; i++) {//子站编号从索引3开始
                stationsComboBox.addItem(tem_WirelessComboBox.getItemAt(i));
            }
            chooseStationDataDialog.pack();
            ShowScope.setLocation(chooseStationDataDialog);
            chooseStationDataDialog.setVisible(true);
        } else {
            fresh();
            JOptionPane.showMessageDialog(this, "无子站！请先进行叫站!");
        }
    }
    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        // TODO add your handling code here:
        //变换图标
        changeIcon(siteDataToggleButton, "siteDataRun32.png", "siteData32.png");
        //采集开始
        OriginSetExceptSiteDataToggleButton();
        siteDataAction(4);
        //不可见
        chooseStationDataDialog.dispose();
        //锁定界面
        clockFrame("获取子站处理数据中...请稍后");
    }//GEN-LAST:event_okButtonActionPerformed

    private void chooseStationDataDialogWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_chooseStationDataDialogWindowClosing
        // TODO add your handling code here:
        clearStationCommbox();
        fresh();
        chooseStationDataDialog.dispose();
    }//GEN-LAST:event_chooseStationDataDialogWindowClosing

    private void mainResisButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainResisButtonActionPerformed
        // TODO add your handling code here:
        //变换图标
        changeIcon(mainResisButton, "mainResisRun32.png", "mainResis32.png");
        //采集开始
        resistancePanel.removeAll();
        if (resistancePanel.isVisible()) {
            resistancePanel.setVisible(false);
        }
        OriginSetExceptMainResis();
        mainResisAction(5);
    }//GEN-LAST:event_mainResisButtonActionPerformed
    public void setMainResisVisual() {
        if (resistancePanel.isVisible()) {
            resistancePanel.setVisible(false);
        } else {
            resistancePanel.setVisible(true);
        }
    }

    public void changeIcon(final JToggleButton button, final String png1, final String png2) {
        //变换图标
        timer1 = new Timer();
        TimerTask task1 = new TimerTask() {
            public void run() {
                String[] strs = button.getIcon().toString().split("[/]");
//                System.out.println(strs[strs.length - 1]);
//                System.out.println(strs[strs.length - 1].equals(png1));
                if (strs[strs.length - 1].equals(png2)) {
                    button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/" + png1)));
                } else {
                    button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/" + png2)));
                }
            }
        };
        timer1.scheduleAtFixedRate(task1, new Date(), 500);//当前时间开始起动 每次间隔2秒再启动
    }

    public void mainResisAction(int recWriteModel) {
        if (mainResisButton.isSelected()) {//已经打开开关 必须是单个子站
            closePort();
//            mainResisButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/mainResis32.png")));
//            mainResisMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/mainResis16.png")));
            String selectedItem = com;//获得端口名称
            try {
                //建立读写线程
                connect.portId = CommPortIdentifier.getPortIdentifier(selectedItem);
                connect = new Write(this);
                connect.recWriteModel = recWriteModel;
            } catch (NoSuchPortException ex) {
//                JOptionPane.showMessageDialog(this, "叫站参数发送错误，请重新关闭尝试！");
            }
            //锁定界面
            clockFrame("外部线路电阻获取中...请稍后");
        } else {
            fresh();
        }
    }
    private void channel3_ComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_channel3_ComboBoxItemStateChanged
        // TODO add your handling code here:
        channel1_ComboBoxItemStateChanged(evt);
    }//GEN-LAST:event_channel3_ComboBoxItemStateChanged

    private void channel2_ComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_channel2_ComboBoxItemStateChanged
        // TODO add your handling code here:
        channel1_ComboBoxItemStateChanged(evt);
    }//GEN-LAST:event_channel2_ComboBoxItemStateChanged

    private void channel1_ComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_channel1_ComboBoxItemStateChanged
        // TODO add your handling code here:
        Component[] components = showingPanel.getComponents();
        int counts = components.length;
        int channel = (Integer) channelSpinner.getValue();
        int rec = 0;//计数
        String channelName = "";
        for (int i = 0; i < counts; i++) {
            ChartPanel chartPanel = (ChartPanel) components[i];
            JFreeChart chart = chartPanel.getChart();
            if (i % channel == 0) {
                channelName = "第" + (i + 1) + "道数据  通道定义：";
                chart.setTitle(channelName + channel1_ComboBox.getSelectedItem());
                rec++;
            } else {
                if (rec == 1) {
                    channelName = "第" + (i + 1) + "道数据  通道定义：";
                    chart.setTitle(channelName + channel2_ComboBox.getSelectedItem());
                    rec++;
                } else if (rec == 2) {
                    channelName = "第" + (i + 1) + "道数据  通道定义：";
                    chart.setTitle(channelName + channel3_ComboBox.getSelectedItem());
                    rec = 0;
                }
            }
            //            channelName = "第" + (i + 1) + "道数据  通道定义：";
            //            chart.setTitle(channelName + channel1_ComboBox.getSelectedItem());
        }
        requestFocus();
    }//GEN-LAST:event_channel1_ComboBoxItemStateChanged

    private void okButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButton1ActionPerformed
        // TODO add your handling code here:
        com = portComboBox.getSelectedItem().toString();
        comSetDialog.dispose();
    }//GEN-LAST:event_okButton1ActionPerformed

    private void comSetMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comSetMenuItemActionPerformed
        // TODO add your handling code here:
        setComsetDiaVisual(this);
    }//GEN-LAST:event_comSetMenuItemActionPerformed

    private void mainResisMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainResisMenuItemActionPerformed
        // TODO add your handling code here:
        mainResisButton.setSelected(true);
        mainResisButtonActionPerformed(evt);
    }//GEN-LAST:event_mainResisMenuItemActionPerformed

    private void formWindowStateChanged(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowStateChanged
        // TODO add your handling code here:
//        String from = null;
//        String to;
//        switch (oldState) {
//            case Frame.NORMAL:
//                from = "正常化";
//                break;
//            case Frame.MAXIMIZED_BOTH:
//                from = "最大化";
//                break;
//            case Frame.ICONIFIED:
//                from = "图标化";
//                break;
//        }
//
//        switch (newState) {
//            case Frame.NORMAL:
//                to = "正常化";
//                break;
//            case Frame.MAXIMIZED_BOTH:
//                to = "最大化";
//                break;
//            default:
//                to = "图标化";
//                break;
//        }
//        System.out.println(from);
//        System.out.println(to);
        //更新列表
        if (informationPanel.isVisible()) {
            int newState = evt.getNewState();
            gpsMainStationTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
            if (newState == Frame.NORMAL) {
                Write.fitTableColumns(stationInforTable, 0);
            } else {
                stationInforTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
            }
        }
    }//GEN-LAST:event_formWindowStateChanged

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        // TODO add your handling code here:
//        if (informationPanel.isVisible()) {//拖动是自动调整
//            gpsMainStationTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
//            int newState = evt.getNewState();
//            
//            if (newState == Frame.NORMAL) {
////                Write.fitTableColumns(gpsMainStationTable, mainStationPanel.getWidth()-gpsMainStationTable.getWidth());
//                Write.fitTableColumns(stationInforTable, 0);
//            } else {
//                stationInforTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
//            }
//        }
    }//GEN-LAST:event_formWindowActivated

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        int choice = JOptionPane.showConfirmDialog(null, "是否确认退出程序", "退出", JOptionPane.YES_NO_OPTION);
        if (choice == 0) {
            System.exit(0);
        }
    }//GEN-LAST:event_formWindowClosing

    private void tem_FreComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_tem_FreComboBoxItemStateChanged
        // TODO add your handling code here:
        if (tem_FreComboBox.getSelectedIndex() >= 4) {
            tem_channelSpinner.setValue("1");
        }
    }//GEN-LAST:event_tem_FreComboBoxItemStateChanged

    private void tem_channelSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tem_channelSpinnerStateChanged
        // TODO add your handling code here:
        //高频只设置1道采集
        if (tem_FreComboBox.getSelectedIndex() >= 4) {
            tem_channelSpinner.setValue("1");
        }
    }//GEN-LAST:event_tem_channelSpinnerStateChanged

    public void addResistanceChart() {
        resistancePanel.add(new ResistanceChart().createDemoPanel());
    }

    public void clearStationCommbox() {
        stationsComboBox.removeAllItems();
    }

    public void siteDataAction(int recWriteModel) {
        Write.selectedWires = tem_WirelessComboBox.getSelectedIndex();//获得所选的无线控制参数
        Write.selectedWiresName = tem_WirelessComboBox.getSelectedItem().toString();//获得子站编号
        if (siteDataToggleButton.isSelected()) {//已经打开开关 必须是单个子站
            closePort();
//            siteDataToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/siteDataRun32.png")));
//            siteDataMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/geopen/siteDataRun16.png")));
            String selectedItem = com;//获得端口名称
            try {
                //建立读写线程
                connect.portId = CommPortIdentifier.getPortIdentifier(selectedItem);
                connect = new Write(this);
                connect.recWriteModel = recWriteModel;
            } catch (NoSuchPortException ex) {
//                JOptionPane.showMessageDialog(this, "叫站参数发送错误，请重新关闭尝试！");
            }
        } else {
            fresh();
            JOptionPane.showMessageDialog(this, "请选择单个子站！");
        }
    }

    /**
     * 横向放大
     */
    public void magnifiedX() {
        if (showingPanel.getWidth() < 10000) {
            if (pressCountsX >= 0) {
                pressCountsX++;
                showingScrollPane.getVerticalScrollBar().setUnitIncrement(unitIncrementX * pressCountsX);
            }
            unitWidth = showingPanel.getWidth() + zoomUnitHor;
            int x = unitWidth;
            int counts = showingPanel.getComponents().length;
            int y = counts * unitHeight;
            SetViewScop.setViewport(showingScrollPane, showingPanel, x, y);
        }
    }

    /**
     * 横向缩小
     */
    public void narrowedX() {
        if (pressCountsX > 0) {
            pressCountsX--;
            showingScrollPane.getVerticalScrollBar().setUnitIncrement(unitIncrementX * pressCountsX);
        }
        unitWidth = showingPanel.getWidth() - zoomUnitHor;
        int x = unitWidth;
        int counts = showingPanel.getComponents().length;
        int y = counts * unitHeight;
        SetViewScop.setViewport(showingScrollPane, showingPanel, x, y);
    }

    /**
     * 纵向缩小
     */
    public void narrowedY() {
        int unitHeigh = ((ChartPanel) showingPanel.getComponents()[0]).getHeight();
        if (unitHeigh >= 200) {
            if (pressCountsY > 0) {
                pressCountsY--;
                showingScrollPane.getVerticalScrollBar().setUnitIncrement(unitIncrementY * pressCountsY);
            }
            int counts = showingPanel.getComponents().length;
            unitHeight = unitHeigh - zoomUnitVer;
            int y = counts * unitHeight;
            int x = unitWidth;
            SetViewScop.setViewport(showingScrollPane, showingPanel, x, y);
        }
    }

    /**
     * 纵向放大
     */
    public void magnifiedY() {
        int unitHeigh = ((ChartPanel) showingPanel.getComponents()[0]).getHeight();
        if (unitHeigh < 500) {
            if (pressCountsY > 0) {
                pressCountsY--;
                showingScrollPane.getVerticalScrollBar().setUnitIncrement(unitIncrementY * pressCountsY);
            }
            int counts = showingPanel.getComponents().length;
            unitHeight = unitHeigh + zoomUnitVer;
            int y = counts * unitHeight;
            int x = unitWidth;
            SetViewScop.setViewport(showingScrollPane, showingPanel, x, y);
        }
    }

    public void savePath() {
        // TODO add your handling code here:
        TEMDataFileFilter fileFilter = new TEMDataFileFilter(filePath);
        fileFilter.setApproveButtonText("确定");
        fileFilter.setDialogTitle("选择要保存的路径");
        fileFilter.setSelectedFile(new File("选择保存路径"));
        //设定文件名选项不可用
        Component comp = getLabelForInChooser(fileFilter, "FileChooser.fileNameLabelText");
        if (comp instanceof JTextField) {
            JTextField field = ((JTextField) comp);
            field.setEditable(false);
            field.setBackground(Color.WHITE);//设定文件
        }
        if (fileFilter.showOpenDialog(this) == TEMDataFileFilter.APPROVE_OPTION) {
            File path = fileFilter.getCurrentDirectory();
            String pathTracks = fileFilter.getCurrentDirectory().toString();
            if (!pathTracks.contains("\\")) {
                JOptionPane.showMessageDialog(this, "路径不对，不能为:" + pathTracks);
                return;
            }
            filePath = pathTracks;
//            System.out.println(filePath.concat("\\").concat("1111").concat(".cs"));
        }
    }

    /**
     * 获得组件 jfilechooser 设定文件名 字符区域不可用
     *
     * @param comp
     * @param s
     * @return
     */
    public static Component getLabelForInChooser(JFileChooser chooser, String key) {
        java.util.Locale l = chooser.getLocale();
        String s = UIManager.getString(key, l);
        javax.swing.plaf.FileChooserUI ui = chooser.getUI();
        int count = ui.getAccessibleChildrenCount(chooser);
        for (int i = 0; i < count; i++) {
            javax.accessibility.Accessible a =
                    ui.getAccessibleChild(chooser, i);
            JLabel label = findLabel((JComponent) a, s);
            if (label != null) {
                return label.getLabelFor();
            }
        }
        return null;
    }

    /**
     * 设定标签 jfilechooser
     *
     * @param comp
     * @param s
     * @return
     */
    private static JLabel findLabel(JComponent comp, String s) {
        JLabel label = null;
        if (comp instanceof JLabel) {
            if (((JLabel) comp).getText().equals(s)) {
                label = (JLabel) comp;
            }
        } else if (comp instanceof JComponent) {
            Component[] comps = comp.getComponents();
            for (int i = 0; i < comps.length; i++) {
                if (comps[i] instanceof JComponent) {
                    label = findLabel((JComponent) comps[i], s);
                    if (label != null) {
                        break;
                    }
                }
            }
        }
        return label;
    }

    public void setSplitPaneRightOrLeftVisual(JSplitPane splitPane, int expandWidth, boolean flagOnlyone) {
        if (flagOnlyone == true) {
            splitPane.setDividerLocation(splitPane.getWidth());
        } else {
            splitPane.setDividerLocation(splitPane.getWidth() - expandWidth);
        }
    }

    public void openTEM() {
        TEMDataFileFilter csamtdff = new TEMDataFileFilter(pathFileOpenDia);
        if (csamtdff.showOpenDialog(this) == csamtdff.APPROVE_OPTION) {
            //清理
            clearComponent();
            File file = csamtdff.getSelectedFile();
            try {
                pathFile = file.getAbsolutePath();
            } catch (Exception e) {
            }
            csamtdff.setCurrentDirectory(file);
            pathFileOpenDia = csamtdff.getCurrentDirectory().toString();
            pathFileOpenDia = pathFileOpenDia.replaceAll("\\\\", "/");
            csamtdff.setCurrentDirectory(file);
            //读取文件
            originData.readTEM(file);
            //设定标题
            setTitle(file.getName() + "-TEM数据采集程序");
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (UnsupportedLookAndFeelException e) {
            e.printStackTrace();
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                TEMAcquisitionProMain frame = new TEMAcquisitionProMain();
                frame.setVisible(true);
                frame.setExtendedState(JFrame.MAXIMIZED_BOTH);//最大化显示awt
                frame.requestFocus();
                Enumeration ports;
                CommPortIdentifier portId;
                ports = CommPortIdentifier.getPortIdentifiers();
                if (ports == null) {
                    System.out.println("No comm ports found!");
                    return;
                }
                while (ports.hasMoreElements()) {
                    portId = (CommPortIdentifier) ports.nextElement();
                    frame.addPort(portId);
                }
                //初始化功能端口
                frame.com = frame.portComboBox.getItemAt(0).toString();
                setComsetDiaVisual(frame);
                if (frame.com.equalsIgnoreCase("")) {
                    JOptionPane.showMessageDialog(frame, "没有检测到可用端口！请尝试关闭程序或重启计算机！");
                    return;
                }
            }
        });
    }

    public static void setComsetDiaVisual(TEMAcquisitionProMain frame) {
        //端口设置对话空框
        frame.comSetDialog.pack();
        ShowScope.setLocation(frame.comSetDialog);
        frame.comSetDialog.setVisible(true);
    }

    private void addPort(CommPortIdentifier portId) {
        if (portId.getPortType() == CommPortIdentifier.PORT_SERIAL) {
            if (portId.isCurrentlyOwned()) {
                JOptionPane.showMessageDialog(this, "检测到 " + portId.getName() + "被占用，若需要利用这个端口请关闭程序！");
            } else {
                portComboBox.addItem(portId.getName());
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu FileMenu;
    private javax.swing.JMenu HelpMenu;
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JMenu SetMenu;
    private javax.swing.JMenu TestMenu;
    private javax.swing.JMenuItem aboutMenuItem;
    public javax.swing.JComboBox channel1_ComboBox;
    public javax.swing.JComboBox channel2_ComboBox;
    public javax.swing.JComboBox channel3_ComboBox;
    public static javax.swing.JSpinner channelSpinner;
    private javax.swing.JLabel channelsLabel;
    private javax.swing.JDialog chooseStationDataDialog;
    private javax.swing.JDialog comSetDialog;
    private javax.swing.JMenuItem comSetMenuItem;
    private javax.swing.JLabel controlLabel;
    public static javax.swing.JLabel countFile1;
    public static javax.swing.JLabel countG;
    public static javax.swing.JTextField daPosPath;
    public static javax.swing.JFormattedTextField dateFormat;
    private javax.swing.JLabel dateLabel;
    private javax.swing.JLabel dateLabel1;
    private javax.swing.JMenuItem exitsMenuItem;
    private javax.swing.JLabel frequenceLabel;
    private javax.swing.JButton frequencyVButton;
    private javax.swing.JMenuItem frequencyVMenuItem;
    public static javax.swing.JLabel fundamentalLab;
    public static javax.swing.JSpinner fundamentalSpinner;
    public static javax.swing.JSpinner gSpinner;
    private javax.swing.JLabel gainLabel;
    public static javax.swing.JScrollPane gpsInforScrollPane;
    public javax.swing.JDialog gpsMainStationDialog;
    public javax.swing.JTable gpsMainStationTable;
    private javax.swing.JButton hideGPSButton;
    private javax.swing.JMenuItem hideGPSMenuItem;
    private javax.swing.JButton hideParaButton;
    private javax.swing.JMenuItem hideParaMenuItem;
    public javax.swing.JPanel informationPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel59;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel62;
    private javax.swing.JLabel jLabel63;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JToolBar jToolBar2;
    public static javax.swing.JTextField latitudeFormat;
    private javax.swing.JLabel latitudeLabel;
    public static javax.swing.JTextField locationState;
    public static javax.swing.JTextField longitudeFormat;
    private javax.swing.JLabel longitudeLabel;
    private javax.swing.JLabel longitudeLabel1;
    public javax.swing.JToggleButton mainResisButton;
    public javax.swing.JMenuItem mainResisMenuItem;
    private javax.swing.JPanel mainStationInforPanel;
    public javax.swing.JPanel mainStationPanel;
    private javax.swing.JButton modelButton;
    private javax.swing.JMenuItem modelMenuItem;
    private javax.swing.JButton okButton;
    private javax.swing.JButton okButton1;
    private javax.swing.JButton openButton;
    private javax.swing.JMenuItem openMenuItem;
    public javax.swing.JPanel paraOutPanel;
    private javax.swing.JScrollPane paraScrollPane;
    private javax.swing.JMenuItem pathMenuItem;
    private javax.swing.JLabel periodLabel;
    private javax.swing.JComboBox portComboBox;
    public javax.swing.JPanel resistancePanel;
    private javax.swing.JButton saveButton;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JPopupMenu.Separator separator1;
    private javax.swing.JButton setCancelButton;
    private javax.swing.JButton setOkButton;
    private javax.swing.JDialog setParaDialog;
    private javax.swing.JPanel setParaPanel;
    private javax.swing.JMenu showMenu;
    public javax.swing.JPanel showingOutPanel;
    public javax.swing.JPanel showingPanel;
    public javax.swing.JScrollPane showingScrollPane;
    public javax.swing.JMenuItem siteDataMenuItem;
    public javax.swing.JToggleButton siteDataToggleButton;
    public javax.swing.JMenuItem startMenuItem;
    public javax.swing.JToggleButton startToggleButton;
    public static javax.swing.JDialog stationInforDialog;
    public javax.swing.JPanel stationInforPanel;
    public javax.swing.JScrollPane stationInforScrollPane;
    public static javax.swing.JTable stationInforTable;
    public javax.swing.JPanel stationPanel;
    public javax.swing.JPanel stationShowingPanel;
    public javax.swing.JScrollPane stationShowingScrollPane;
    public javax.swing.JComboBox stationsComboBox;
    public static javax.swing.JLabel superpositionLab;
    public static javax.swing.JLabel superpositionLab1;
    public static javax.swing.JLabel superpositionLab2;
    public static javax.swing.JLabel superpositionLab3;
    public static javax.swing.JSpinner superpositonSpinner;
    public javax.swing.JComboBox tem_FreComboBox;
    public static javax.swing.JComboBox tem_WirelessComboBox;
    public javax.swing.JSpinner tem_channelSpinner;
    public javax.swing.JComboBox tem_gainComboBox;
    public javax.swing.JSpinner tem_periodSpinner;
    public javax.swing.JTextField tem_posTextField;
    public static javax.swing.JComboBox tem_transmittedModelComboBox;
    public javax.swing.JToggleButton testStation;
    public javax.swing.JMenuItem testStationMenuItem;
    public static javax.swing.JFormattedTextField timeFormat;
    private javax.swing.JButton timeVButton;
    private javax.swing.JMenuItem timeVMenuItem;
    private javax.swing.JLabel transmittedLabel;
    public javax.swing.JToggleButton transmittedResisButt;
    public javax.swing.JMenuItem transmittedResisMenuItem;
    // End of variables declaration//GEN-END:variables
}
